{"version":3,"sources":["components/pages/mainPage/MainPage.module.css","components/containers/AppContainer.module.css","components/containers/AppContainer.js","utils/lomda.js","constants/colors.js","utils/icons.js","constants/costs.js","components/elements/markerTooltip/MarkerTooltip.js","components/elements/siteMarker/SiteMarker.js","components/pages/mainPage/MainPage.js","components/pages/notFoundPage/NotFoundPage.js","components/app/App.js","constants/routes.js","index.js"],"names":["module","exports","wrapper","controlWrapper","mapContainer","AppContainer","react_default","a","createElement","className","styles","this","props","children","Component","isNotNil","complement","isNil","isNilOrEmpty","isEmpty","value","isNotNilAndNotEmpty","COLORS","equals","map","item","toLowerCase","trim","ICON_SIZE","icons","reduce","result","color","Object","objectSpread","defineProperty","Leaflet","icon","iconUrl","concat","iconSize","getIconByCost","cost","iconColor","getIconColorByCost","SELECTED_ICON","costsDictionary","waitingTime","tripTimeInTheCabin","numberOfTransfers","transferFee","MarkerTooltip","_this$props","id","name","selected","data","objectWithoutProperties","Tooltip","style","display","flexDirection","Fragment","entries","_ref","_ref2","slicedToArray","description","key","defaultProps","SiteMarker","handleClick","_this","handleMarkerClick","position","Marker","onClick","DEFAULT_POSITION","MainPage","state","sites","costs","selectedId","undefined","readFile","file","reader","FileReader","onloadend","Papa","parse","complete","results","console","log","clearData","filter","row","every","cell","processSites","setState","processCosts","readAsDataURL","arguments","length","toArray","names","slice","idIndex","indexOf","nameIndex","longitudeIndex","latitudeIndex","Number","longitude","latitude","_ref3","_ref4","idFromIndex","idToIndex","costIndex","waitingTimeIndex","tripTimeInTheCabinIndex","numberOfTransfersIndex","transferFeeIndex","handleChange","event","files","target","sitesFile","find","costsFile","handleMapClick","_this2","_this$state","htmlFor","textDecoration","cursor","type","onChange","multiple","visibility","accept","Map","center","zoom","TileLayer","attribution","url","_ref5","siteId","siteName","costsData","pathOr","isSelected","SiteMarker_SiteMarker","MarkerTooltip_MarkerTooltip","assign","NotFoundPage","App","react_router_dom","AppContainer_AppContainer","react_router","exact","path","component","ReactDOM","render","App_App","document","getElementById"],"mappings":"4EACAA,EAAAC,QAAA,CAAkBC,QAAA,0BAAAC,eAAA,iCAAAC,aAAA,oDCAlBJ,EAAAC,QAAA,CAAkBC,QAAA,8OCGGG,mLAOb,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOR,SAClBS,KAAKC,MAAMC,iBATcC,+ICSpCC,EAAWC,YAAWC,KAEtBC,GADaF,YAAWG,KACT,SAAAC,GAAK,OAAIH,YAAMG,IAAUD,YAAQC,KAChDC,EAAsBL,YAAWE,GCT1BI,GDUON,YAAWO,KAENC,YAAI,SAAAC,GAAI,OAAIA,EAAKC,cAAcC,SCnB1C,SAODL,EANC,QAMDA,EALE,SAKFA,EAJD,MAICA,EAHE,SAGFA,EAFA,uBCDPM,EAAY,CAAC,GAAI,IAGjBC,EAFc,CAACP,EAAcA,EAAcA,EAAeA,EAAYA,EAAeA,GAEjEQ,OAAO,SAACC,EAAQC,GACtC,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACAF,EADPE,OAAAE,EAAA,EAAAF,CAAA,GAEKD,EAAQI,IAAQC,KAAK,CAClBC,QAAO,qBAAAC,OAAuBP,EAAvB,QACPQ,SAAUZ,OAGnB,IAgBUa,EAAgB,SAACC,GAC1B,IAAMC,EAfiB,SAAAD,GACvB,OAAIzB,YAAMyB,GACCpB,EACAoB,EAAO,EACPpB,EACAoB,GAAQ,GAAKA,EAAO,GACpBpB,EACAoB,GAAQ,IAAMA,EAAO,GACrBpB,EAEAA,EAKOsB,CAAmBF,GAErC,OAAOb,EAAMc,IAGJE,EAAgBhB,EAAMP,2BCrCtBwB,EAAkB,CAC3BJ,KAAM,kKACNK,YAAa,kHACbC,mBAAoB,6GACpBC,kBAAmB,wFACnBC,YAAa,sICCIC,mLASR,IAAAC,EACmCzC,KAAKC,MAArCyC,EADHD,EACGC,GAAIC,EADPF,EACOE,KAAMC,EADbH,EACaG,SAAaC,EAD1BvB,OAAAwB,EAAA,EAAAxB,CAAAmB,EAAA,0BAGL,OACI9C,EAAAC,EAAAC,cAACkD,EAAA,EAAD,KACIpD,EAAAC,EAAAC,cAAA,OAAKmD,MAAO,CAAEC,QAAS,OAAQC,cAAe,WAC1CvD,EAAAC,EAAAC,cAAA,mBAAA+B,OAAcc,IACd/C,EAAAC,EAAAC,cAAA,iEAAA+B,OAAoBe,KAEfC,GACGjD,EAAAC,EAAAC,cAAAF,EAAAC,EAAAuD,SAAA,KAEQ7B,OAAO8B,QAAQjB,GAAiBtB,IAAI,SAAAwC,GAAyB,IAAAC,EAAAhC,OAAAiC,EAAA,EAAAjC,CAAA+B,EAAA,GAAvBV,EAAuBW,EAAA,GAAjBE,EAAiBF,EAAA,GAC/C7C,EAAQoC,EAAKF,GACnB,OAAIpC,EAAaE,GACN,KAIPd,EAAAC,EAAAC,cAAA,QAAM4D,IAAG,GAAA7B,OAAKc,EAAL,KAAAd,OAAWe,IAApB,GAAAf,OAAgC4B,EAAhC,MAAA5B,OAAgDnB,gBA5BrDN,aAAtBqC,EAOVkB,aAAe,eCTLC,6MAOjBC,YAAc,SAAAlB,GAAE,OAAI,WACZmB,EAAK5D,MAAM6D,mBACXD,EAAK5D,MAAM6D,kBAAkBpB,6EAI5B,IAAAD,EACoCzC,KAAKC,MAAtCyC,EADHD,EACGC,GAAIqB,EADPtB,EACOsB,SAAUrC,EADjBe,EACiBf,KAAMxB,EADvBuC,EACuBvC,SAE5B,OACIP,EAAAC,EAAAC,cAACmE,EAAA,EAAD,CACID,SAAUA,EACVrC,KAAMA,EACNuC,QAASjE,KAAK4D,YAAYlB,IAEzBxC,UAtBuBC,aCQlC+D,GAAmB,CAAC,OAAQ,QAGbC,8MAKjBC,MAAQ,CACJC,MAAO,GACPC,MAAO,GACPC,gBAAYC,KAGhBC,SAAW,SAAAC,GACP,IAAMC,EAAS,IAAIC,WACflE,EAAoBgE,KACpBC,EAAOE,UAAY,WACfC,IAAKC,MAAML,EAAM,CACbM,SAAU,SAACC,GACPC,QAAQC,IAAI,YAAaF,EAAQpC,MACjC,IAAMuC,EAAYH,EAAQpC,KAAKwC,OAAO,SAAAC,GAAG,OAAIA,EAAIC,MAAM,SAAAC,GAAI,OAAI9E,EAAoB8E,OAEnF,GAAgC,cAA5Bd,EAAK/B,KAAK5B,cAA+B,CACzC,IAAMsD,EAAQR,EAAK4B,aAAaL,GAEhCvB,EAAK6B,SAAS,CACVrB,eAED,GAAgC,cAA5BK,EAAK/B,KAAK5B,cAA+B,CAChD,IAAMuD,EAAQT,EAAK8B,aAAaP,GAEhCvB,EAAK6B,SAAS,CACVpB,eAMpBK,EAAOiB,cAAclB,OAI7Be,aAAe,WAA2B,IAAApC,EAAAwC,UAAAC,OAAA,QAAAtB,IAAAqB,UAAA,GAAAA,UAAA,GAAP,GAAOvC,EAAAhC,OAAAyE,EAAA,EAAAzE,CAAA+B,GAAzB2C,EAAyB1C,EAAA,GAAfT,EAAeS,EAAA2C,MAAA,GAChCC,EAAUF,EAAMG,QAAQ,WACxBC,EAAYJ,EAAMG,QAAQ,aAC1BE,EAAiBL,EAAMG,QAAQ,aAC/BG,EAAgBN,EAAMG,QAAQ,YAEpC,OAAOtD,EAAKhC,IAAI,SAAAyE,GAAG,MACf,CACI5C,GAAI6D,OAAOjB,EAAIY,IACfvD,KAAM2C,EAAIc,GACVI,UAAWD,OAAOjB,EAAIe,IACtBI,SAAUF,OAAOjB,EAAIgB,UAKjCX,aAAe,WAA2B,IAAAe,EAAAb,UAAAC,OAAA,QAAAtB,IAAAqB,UAAA,GAAAA,UAAA,GAAP,GAAOc,EAAArF,OAAAyE,EAAA,EAAAzE,CAAAoF,GAAzBV,EAAyBW,EAAA,GAAf9D,EAAe8D,EAAAV,MAAA,GAChCW,EAAcZ,EAAMG,QAAQ,gBAC5BU,EAAYb,EAAMG,QAAQ,cAC1BW,EAAYd,EAAMG,QAAQ,QAC1BY,EAAmBf,EAAMG,QAAQ,SACjCa,EAA0BhB,EAAMG,QAAQ,UACxCc,EAAyBjB,EAAMG,QAAQ,QACvCe,EAAmBlB,EAAMG,QAAQ,QAEvC,OAAOtD,EAAK1B,OAAO,SAACC,EAAQkE,GACxB,OAAOhE,OAAAC,EAAA,EAAAD,CAAA,GACAF,EADPE,OAAAE,EAAA,EAAAF,CAAA,GAEKgE,EAAIsB,GAFTtF,OAAAC,EAAA,EAAAD,CAAA,GAGWF,EAAOkE,EAAIsB,IAHtBtF,OAAAE,EAAA,EAAAF,CAAA,GAISgE,EAAIuB,GAAa,CAEd9E,KAAMwE,OAAOjB,EAAIwB,IAEjB1E,YAAamE,OAAOjB,EAAIyB,IAExB1E,mBAAoBkE,OAAOjB,EAAI0B,IAE/B1E,kBAAmBiE,OAAOjB,EAAI2B,IAE9B1E,YAAagE,OAAOjB,EAAI4B,UAIrC,OAGPC,aAAe,SAAAC,GAAS,IACVC,EADU/F,OAAAyE,EAAA,EAAAzE,CACD8F,EAAME,OAAOD,OADZpB,MAAA,GAEdsB,EAAYF,EAAMG,KAAK,SAAA9C,GAAI,MAAkB,cAAdA,EAAK/B,OACpC8E,EAAYJ,EAAMG,KAAK,SAAA9C,GAAI,MAAkB,cAAdA,EAAK/B,OAE1CkB,EAAKY,SAAS8C,GACd1D,EAAKY,SAASgD,MAGlB3D,kBAAoB,SAAApB,GACZmB,EAAKO,MAAMG,aAAe7B,GAC1BmB,EAAK6B,SAAS,CACVnB,WAAY7B,OAKxBgF,eAAiB,WACTtH,EAASyD,EAAKO,MAAMG,aACpBV,EAAK6B,SAAS,CACVnB,gBAAYC,6EAKf,IAAAmD,EAAA3H,KAAA4H,EACgC5H,KAAKoE,MAAlCE,EADHsD,EACGtD,MAAOD,EADVuD,EACUvD,MAAOE,EADjBqD,EACiBrD,WAEtB,OACI5E,EAAAC,EAAAC,cAAAF,EAAAC,EAAAuD,SAAA,KACIxD,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOP,gBACnBG,EAAAC,EAAAC,cAAA,SACIgI,QAAQ,QACR7E,MAAO,CACH8E,eAAgB,YAChBC,OAAQ,YAJhB,yFAUApI,EAAAC,EAAAC,cAAA,SACI6C,GAAG,QACHsF,KAAK,OACLC,SAAUjI,KAAKmH,aACfe,UAAQ,EACRlF,MAAO,CAAEmF,WAAY,UACrBC,OAAO,SAGP1H,EAAoB2D,IAChB1E,EAAAC,EAAAC,cAAA,mCAIJa,EAAoB4D,IAChB3E,EAAAC,EAAAC,cAAA,oCAIZF,EAAAC,EAAAC,cAACwI,EAAA,EAAD,CACIC,OAAQpE,GACRqE,KAvJC,GAwJDzI,UAAWC,IAAON,aAClBwE,QAASjE,KAAK0H,gBAEd/H,EAAAC,EAAAC,cAAC2I,EAAA,EAAD,CACIC,YAAY,yEACZC,IAAI,6CAGJrE,EAAMxD,IAAI,SAAA8H,GAAyD,IAAlDC,EAAkDD,EAAtDjG,GAAkBmG,EAAoCF,EAA1ChG,KAAgB8D,EAA0BkC,EAA1BlC,SAAUD,EAAgBmC,EAAhBnC,UACzCsC,EAAYC,YAAO,GAAI,CAACxE,EAAYqE,GAAStE,GAC7C0E,EAAcJ,IAAWrE,EACzB7C,EAAOsH,EAAa9G,EAAgBJ,EAAcgH,EAAU/G,MAElE,OACIpC,EAAAC,EAAAC,cAACoJ,EAAD,CACIxF,IAAKmF,EACLlG,GAAIkG,EACJ7E,SAAU,CAAC0C,EAAUD,GACrB5D,SAAUoG,EACVtH,KAAMA,EACNoC,kBAAmB6D,EAAK7D,mBAExBnE,EAAAC,EAAAC,cAACqJ,EAAD5H,OAAA6H,OAAA,CACIzG,GAAIkG,EACJjG,KAAMkG,EACNjG,SAAUoG,GACNF,gBAhLN3I,aAAjBgE,GAGVT,aAAe,GChB1B,IAEe0F,GAFM,kBAAMzJ,EAAAC,EAAAC,cAAA,+KCMNwJ,oLAEb,OACI1J,EAAAC,EAAAC,cAACyJ,EAAA,EAAD,KACI3J,EAAAC,EAAAC,cAAC0J,EAAD,KACI5J,EAAAC,EAAAC,cAAC2J,EAAA,EAAD,KACI7J,EAAAC,EAAAC,cAAC2J,EAAA,EAAD,CAAOC,OAAK,EAACC,KCdb,IDcoCC,UAAWxF,KAC/CxE,EAAAC,EAAAC,cAAC2J,EAAA,EAAD,CAAOG,UAAWP,eAPTjJ,yBEFjCyJ,IAASC,OAAOlK,EAAAC,EAAAC,cAACiK,GAAD,MAASC,SAASC,eAAe","file":"static/js/main.c2e23988.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"MainPage_wrapper__WAaqP\",\"controlWrapper\":\"MainPage_controlWrapper__27UOu\",\"mapContainer\":\"MainPage_mapContainer__2nhOB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"AppContainer_wrapper__3HvJ6\"};","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './AppContainer.module.css';\r\n\r\nexport default class AppContainer extends Component {\r\n    static propTypes = {\r\n        children: PropTypes.node,\r\n    };\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className={styles.wrapper}>\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import {\r\n    complement,\r\n    equals,\r\n    find,\r\n    isEmpty,\r\n    isNil,\r\n    map,\r\n} from 'ramda';\r\n\r\nconst noop = () => {\r\n    // do nothing\r\n};\r\n\r\nconst isNotNil = complement(isNil);\r\nconst isNotEmpty = complement(isEmpty);\r\nconst isNilOrEmpty = value => isNil(value) || isEmpty(value);\r\nconst isNotNilAndNotEmpty = complement(isNilOrEmpty);\r\nconst isNotEquals = complement(equals);\r\nconst buildFindById = targetId => find(item => item.id === targetId);\r\nconst normalizeStrings = map(item => item.toLowerCase().trim());\r\n\r\nexport {\r\n    noop,\r\n    isNotNil,\r\n    isNotEmpty,\r\n    isNilOrEmpty,\r\n    isNotNilAndNotEmpty,\r\n    isNotEquals,\r\n    buildFindById,\r\n    normalizeStrings,\r\n};\r\n","const BLACK = 'black';\r\nconst GREEN = 'green';\r\nconst YELLOW = 'yellow';\r\nconst RED = 'red';\r\nconst VIOLET = 'violet';\r\nconst BLUE = 'blue';\r\n\r\nexport const COLORS = {\r\n    BLACK,\r\n    GREEN,\r\n    YELLOW,\r\n    RED,\r\n    VIOLET,\r\n    BLUE,\r\n};","import { COLORS } from '../constants/colors';\r\nimport Leaflet from 'leaflet';\r\nimport { isNil } from 'ramda';\r\n\r\nconst ICON_SIZE = [30, 45];\r\nconst ICON_COLORS = [COLORS.BLACK, COLORS.GREEN, COLORS.YELLOW, COLORS.RED, COLORS.VIOLET, COLORS.BLUE];\r\n\r\nconst icons = ICON_COLORS.reduce((result, color) => {\r\n    return {\r\n        ...result,\r\n        [color]: Leaflet.icon({\r\n            iconUrl: `/icons/map-marker-${color}.svg`,\r\n            iconSize: ICON_SIZE,\r\n        }),\r\n    };\r\n}, {});\r\n\r\nconst getIconColorByCost = cost => {\r\n    if (isNil(cost)) {\r\n        return COLORS.BLACK;\r\n    } else if (cost < 5) {\r\n        return COLORS.GREEN;\r\n    } else if (cost >= 5 && cost < 15) {\r\n        return COLORS.YELLOW;\r\n    } else if (cost >= 15 && cost < 30) {\r\n        return COLORS.RED;\r\n    } else {\r\n        return COLORS.VIOLET;\r\n    }\r\n};\r\n\r\nexport const getIconByCost = (cost) => {\r\n    const iconColor = getIconColorByCost(cost);\r\n\r\n    return icons[iconColor];\r\n};\r\n\r\nexport const SELECTED_ICON = icons[COLORS.BLUE];","export const costsDictionary = {\r\n    cost: 'агрегированные затраты, минут',\r\n    waitingTime: 'время ожидания, минут',\r\n    tripTimeInTheCabin: 'время в салоне, минут',\r\n    numberOfTransfers: 'число пересадок',\r\n    transferFee: 'штраф за пересадки, минут',\r\n};","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Tooltip } from 'react-leaflet';\r\nimport { isNilOrEmpty } from '../../../utils/lomda';\r\nimport { costsDictionary } from '../../../constants/costs';\r\n\r\nexport default class MarkerTooltip extends Component {\r\n    static propTypes = {\r\n        id: PropTypes.number.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        selected: PropTypes.bool,\r\n    };\r\n\r\n    static defaultProps = {};\r\n\r\n    render() {\r\n        const { id, name, selected, ...data } = this.props;\r\n\r\n        return (\r\n            <Tooltip>\r\n                <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                    <span>{`id: ${id}`}</span>\r\n                    <span>{`название: ${name}`}</span>\r\n                    {\r\n                        !selected && (\r\n                            <>\r\n                                {\r\n                                    Object.entries(costsDictionary).map(([name, description]) => {\r\n                                            const value = data[name];\r\n                                            if (isNilOrEmpty(value)) {\r\n                                                return null;\r\n                                            }\r\n\r\n                                            return (\r\n                                                <span key={`${id}_${name}`}>{`${description}: ${value}`}</span>\r\n                                            );\r\n                                        },\r\n                                    )\r\n\r\n                                }\r\n                            </>\r\n                        )\r\n                    }\r\n                </div>\r\n            </Tooltip>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Marker } from 'react-leaflet';\r\n\r\nexport default class SiteMarker extends Component {\r\n    static propTypes = {\r\n        children: PropTypes.node,\r\n        id: PropTypes.number.isRequired,\r\n        position: PropTypes.arrayOf(PropTypes.number).isRequired,\r\n    };\r\n\r\n    handleClick = id => () => {\r\n        if (this.props.handleMarkerClick) {\r\n            this.props.handleMarkerClick(id);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { id, position, icon, children } = this.props;\r\n\r\n        return (\r\n            <Marker\r\n                position={position}\r\n                icon={icon}\r\n                onClick={this.handleClick(id)}\r\n            >\r\n                {children}\r\n            </Marker>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport Papa from 'papaparse';\r\nimport { pathOr } from 'ramda';\r\nimport styles from './MainPage.module.css';\r\nimport { Map, TileLayer } from 'react-leaflet';\r\nimport { isNotNil, isNotNilAndNotEmpty } from '../../../utils/lomda';\r\nimport { getIconByCost, SELECTED_ICON } from '../../../utils/icons';\r\nimport MarkerTooltip from '../../elements/markerTooltip/MarkerTooltip';\r\nimport SiteMarker from '../../elements/siteMarker/SiteMarker';\r\n\r\n// [latitude, longitude]\r\nconst DEFAULT_POSITION = [55.772, 37.606];\r\nconst DEFAULT_ZOOM = 14;\r\n\r\nexport default class MainPage extends Component {\r\n    static propTypes = {};\r\n\r\n    static defaultProps = {};\r\n\r\n    state = {\r\n        sites: [],\r\n        costs: {},\r\n        selectedId: undefined,\r\n    };\r\n\r\n    readFile = file => {\r\n        const reader = new FileReader();\r\n        if (isNotNilAndNotEmpty(file)) {\r\n            reader.onloadend = () => {\r\n                Papa.parse(file, {\r\n                    complete: (results) => {\r\n                        console.log('Finished:', results.data);\r\n                        const clearData = results.data.filter(row => row.every(cell => isNotNilAndNotEmpty(cell)));\r\n\r\n                        if (file.name.toLowerCase() === 'sites.csv') {\r\n                            const sites = this.processSites(clearData);\r\n\r\n                            this.setState({\r\n                                sites,\r\n                            });\r\n                        } else if (file.name.toLowerCase() === 'costs.csv') {\r\n                            const costs = this.processCosts(clearData);\r\n\r\n                            this.setState({\r\n                                costs,\r\n                            });\r\n                        }\r\n                    },\r\n                });\r\n            };\r\n            reader.readAsDataURL(file);\r\n        }\r\n    };\r\n\r\n    processSites = ([names, ...data] = []) => {\r\n        const idIndex = names.indexOf('site_id');\r\n        const nameIndex = names.indexOf('site_name');\r\n        const longitudeIndex = names.indexOf('longitude');\r\n        const latitudeIndex = names.indexOf('latitude');\r\n\r\n        return data.map(row => (\r\n            {\r\n                id: Number(row[idIndex]),\r\n                name: row[nameIndex],\r\n                longitude: Number(row[longitudeIndex]),\r\n                latitude: Number(row[latitudeIndex]),\r\n            }\r\n        ));\r\n    };\r\n\r\n    processCosts = ([names, ...data] = []) => {\r\n        const idFromIndex = names.indexOf('site_id_from');\r\n        const idToIndex = names.indexOf('site_id_to');\r\n        const costIndex = names.indexOf('cost');\r\n        const waitingTimeIndex = names.indexOf('iwait');\r\n        const tripTimeInTheCabinIndex = names.indexOf('inveht');\r\n        const numberOfTransfersIndex = names.indexOf('xnum');\r\n        const transferFeeIndex = names.indexOf('xpen');\r\n\r\n        return data.reduce((result, row) => {\r\n            return {\r\n                ...result,\r\n                [row[idFromIndex]]: {\r\n                    ...result[row[idFromIndex]],\r\n                    [row[idToIndex]]: {\r\n                        // агрегированные затраты на перемещение\r\n                        cost: Number(row[costIndex]),\r\n                        // время ожидания\r\n                        waitingTime: Number(row[waitingTimeIndex]),\r\n                        // время в салоне\r\n                        tripTimeInTheCabin: Number(row[tripTimeInTheCabinIndex]),\r\n                        // число пересадок\r\n                        numberOfTransfers: Number(row[numberOfTransfersIndex]),\r\n                        // штраф за пересадки\r\n                        transferFee: Number(row[transferFeeIndex]),\r\n                    },\r\n                },\r\n            };\r\n        }, {});\r\n    };\r\n\r\n    handleChange = event => {\r\n        const [...files] = event.target.files;\r\n        const sitesFile = files.find(file => file.name === 'sites.csv');\r\n        const costsFile = files.find(file => file.name === 'costs.csv');\r\n\r\n        this.readFile(sitesFile);\r\n        this.readFile(costsFile);\r\n    };\r\n\r\n    handleMarkerClick = id => {\r\n        if (this.state.selectedId !== id) {\r\n            this.setState({\r\n                selectedId: id,\r\n            });\r\n        }\r\n    };\r\n\r\n    handleMapClick = () => {\r\n        if (isNotNil(this.state.selectedId)) {\r\n            this.setState({\r\n                selectedId: undefined,\r\n            });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { costs, sites, selectedId } = this.state;\r\n\r\n        return (\r\n            <>\r\n                <div className={styles.controlWrapper}>\r\n                    <label\r\n                        htmlFor='files'\r\n                        style={{\r\n                            textDecoration: 'underline',\r\n                            cursor: 'pointer',\r\n                        }}\r\n                    >\r\n                        Загрузить файлы\r\n                    </label>\r\n\r\n                    <input\r\n                        id='files'\r\n                        type='file'\r\n                        onChange={this.handleChange}\r\n                        multiple\r\n                        style={{ visibility: 'hidden' }}\r\n                        accept='.csv'\r\n                    />\r\n                    {\r\n                        isNotNilAndNotEmpty(sites) && (\r\n                            <span>file sites uploaded</span>\r\n                        )\r\n                    }\r\n                    {\r\n                        isNotNilAndNotEmpty(costs) && (\r\n                            <span>file costs uploaded</span>\r\n                        )\r\n                    }\r\n                </div>\r\n                <Map\r\n                    center={DEFAULT_POSITION}\r\n                    zoom={DEFAULT_ZOOM}\r\n                    className={styles.mapContainer}\r\n                    onClick={this.handleMapClick}\r\n                >\r\n                    <TileLayer\r\n                        attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\r\n                        url=\"https://{s}.tile.osm.org/{z}/{x}/{y}.png\"\r\n                    />\r\n                    {\r\n                        sites.map(({ id: siteId, name: siteName, latitude, longitude }) => {\r\n                            const costsData = pathOr({}, [selectedId, siteId], costs);\r\n                            const isSelected = (siteId === selectedId);\r\n                            const icon = isSelected ? SELECTED_ICON : getIconByCost(costsData.cost);\r\n\r\n                            return (\r\n                                <SiteMarker\r\n                                    key={siteId}\r\n                                    id={siteId}\r\n                                    position={[latitude, longitude]}\r\n                                    selected={isSelected}\r\n                                    icon={icon}\r\n                                    handleMarkerClick={this.handleMarkerClick}\r\n                                >\r\n                                    <MarkerTooltip\r\n                                        id={siteId}\r\n                                        name={siteName}\r\n                                        selected={isSelected}\r\n                                        {...costsData}\r\n                                    />\r\n                                </SiteMarker>\r\n                            );\r\n                        })\r\n                    }\r\n                </Map>\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nconst NotFoundPage = () => <div>Данная страница не существует</div>;\r\n\r\nexport default NotFoundPage;","import React, { Component } from 'react';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\n\r\nimport * as routes from '../../constants/routes';\r\nimport AppContainer from '../containers/AppContainer';\r\nimport MainPage from '../pages/mainPage/MainPage';\r\nimport NotFoundPage from '../pages/notFoundPage/NotFoundPage';\r\n\r\nexport default class App extends Component {\r\n    render() {\r\n        return (\r\n            <BrowserRouter>\r\n                <AppContainer>\r\n                    <Switch>\r\n                        <Route exact path={routes.MAIN_URL} component={MainPage} />\r\n                        <Route component={NotFoundPage} />\r\n                    </Switch>\r\n                </AppContainer>\r\n            </BrowserRouter>\r\n        );\r\n    }\r\n}\r\n","export const MAIN_URL = '/';","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/App';\nimport 'leaflet/dist/leaflet.css';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}